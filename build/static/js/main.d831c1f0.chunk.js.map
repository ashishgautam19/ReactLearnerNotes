{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","background","fontFamily","myStyle","setMyStyle","btn","setMyBtn","className","style","id","type","onClick","backgroundColor","border","Navbar","props","mode","href","title","class","secondary","to","toggleMode","role","htmlFor","TextForm","text","setText","heading","value","backgroungColor","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","Alert","alert","word","lower","charAt","slice","capitilize","msg","App","setMode","setAlert","message","setTimeout","body","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d831c1f0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'white',\r\n        background: 'black',\r\n        fontFamily: 'Abril Fatface',\r\n\r\n    });\r\n    const [btn, setMyBtn] = useState(\"Enable Light Mode\");\r\n\r\n    const changeMode = () => {\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            setMyBtn('Enable Light Mode')\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                border: '1px solid red'\r\n            })\r\n             setMyBtn('Enable Dark Mode')\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-1\" style={myStyle}>\r\n                <h3>About Us</h3>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <button type=\"button\" onClick={changeMode} className=\"btn btn-success my-1\"> {btn}</button>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\"><strong>{props.title}</strong><span class=\"badge bg-secondary\">{props.secondary}</span></a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link  className=\"nav-link\" to=\"/about\">About us</Link>\r\n                        </li>\r\n\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n\r\n                    <div className={`form-check form-switch text-${props.mode == 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enabled the Mode</label>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n    title: 'set the title is required'\r\n};\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    let handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted into UpperCase\",'success')\r\n    }\r\n    \r\n    let handleDoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted into LowerCase\",'success')\r\n    }\r\n    \r\n    let handleClearText = () => {\r\n        let newText = \" \";\r\n        setText(newText);\r\n        props.showAlert(\"Converted into Clear text\",'success')\r\n    }\r\n    \r\n    const handleExtraSpaces = ()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"It's removed the ExtraSpace text\",'success')\r\n    }\r\n    const handleCopyText = ()=>{\r\n        let text =document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    let handleOnchange = (event) => {\r\n        setText(event.target.value);\r\n\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <>\r\n            <div>\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-3\">\r\n                    {/* <label for=\"exampleFormControlTextarea1\" class=\"form-label\">Example textarea</label> */}\r\n                    <textarea className=\"form-control\" value={text} style={{backgroungColor: props.mode === 'light' ? 'dark' : 'light'}} onChange={handleOnchange} id=\"myBox\" rows=\"8\"></textarea>\r\n                    <button className=\"btn btn-primary my-2\" onClick={handleUpClick} >Convert to Uppercase</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleDoClick} >Convert to Lowercase</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleExtraSpaces} >Remove Extra Space</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleClearText} >Clear the text</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleCopyText} >Copy Text</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n            <h3>Your Text Summary</h3>\r\n            <p>Words are {text.split(\" \").length} and Character are {text.length}</p>\r\n            <h3>Preview</h3>\r\n            <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitilize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitilize(props.alert.type)}</strong>: {props.alert.msg}\r\n           \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n\n  }\n\n  let toggleMode = () => {\n    if (mode === 'dark') {\n      setMode('light');\n      document.body.style.backgroundColor = '#e6ffff';\n      showAlert(\"Light mode is on\", \"success\")\n      document.title = \"Shaklaka-Light mode\"\n      setInterval(() => {\n        document.title = \"Desi-boys\"\n      }, 2000);\n      setInterval(() => {\n        document.title = \"Desi-Girls\"\n      }, 1500);\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#00264d';\n      showAlert(\"Dark mode is on\", \"success\")\n      document.title = \"Shaklaka-Dark mode\"\n    }\n  }\n  // Creating this for change of Enabled Word ...dark to light bt can't worked!!\n  // const [btxt, setbTxt] = useState(\"Enabled light mode\");\n  // let btnText = () => {\n  //   if (mode == 'white') {\n  //     setbTxt('Enabled dark mode')\n\n  //   } else {\n  //     setbTxt('Enabled light mode')\n\n  //   }\n  // }\n  return (\n    <>\n      <Router>\n        {/* <Navbar title={\"Shaklaaka\"} mode={mode} btnText={btnText} toggleMode={toggleMode} secondary={\"Boom Boom\"} /> */}\n        <Navbar title={\"Shaklaaka\"} mode={mode} toggleMode={toggleMode} secondary={\"Boom Boom\"} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm showAlert={showAlert} heading={\"Enter the Txt \"} mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n        <div className=\"container\">\n          {/* <About /> */}\n        </div>\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}